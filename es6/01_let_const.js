{
	let a = 1;
	var b = 1;
}
// console.log(a);
// let 声明的变量只在它所在的代码块有效
console.log(b);

for(let i = 0;i < 3; i++){
	let i = "abc";
	console.log(i);
}
// for 循环，设置循环变量的那部分是一个父作用域，循环体内部是一个单独的子作用域

console.log("_________________");

function f1() {
	let n = 5;
	if(true){
	    let n = 10;
	}
	console.log(n);
}
f1();

console.log("_________________");



// 情况一
/*
if (true) {
    function f() {}
}
*/

// 情况二
/*
try {
    function f() {}
} catch(e) {
    // ...
}
*/
//ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。
//上面两种函数声明，根据 ES5 的规定都是非法的。
//但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。

//ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。
//const 声明一个只读的常量。一旦声明，常量的值就不能改变。
//const 声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。
//const 的作用域与let命令相同：只在声明所在的块级作用域内有效。